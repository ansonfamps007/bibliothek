
plugins {
	id 'org.springframework.boot' version '2.6.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.dlib.bibliothek'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

/*configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}*/

repositories {
	mavenCentral()
}

/*ext {
    jacocoVersion = '0.8.3'
}*/

dependencies {
	/*implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.boot:spring-boot-starter-mail')
	implementation('io.micrometer:micrometer-registry-prometheus')
    implementation('io.springfox:springfox-swagger2:2.9.2')
    implementation('io.springfox:springfox-swagger-ui:2.9.2')
    implementation('io.jsonwebtoken:jjwt:0.9.1')
	compileOnly 'org.projectlombok:lombok'
	compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.18'
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.10'
	compile group: 'commons-io', name: 'commons-io', version: '2.6'
	compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.10'
	compile group: 'com.google.zxing', name: 'core', version: '3.3.0'
	compile group: 'com.google.zxing', name: 'javase', version: '3.3.0'
	compile group: 'com.itextpdf', name: 'itextpdf', version: '5.0.6'
	compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: '2.1.1.RELEASE'
	compile group: 'com.microsoft.azure', name: 'adal4j', version: '1.6.3'
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-activemq'
	compile("org.springframework.ldap:spring-ldap-core")
    compile("org.springframework.security:spring-security-ldap")
    compile("org.springframework:spring-tx")
    compile("com.unboundid:unboundid-ldapsdk")
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	compile group: 'org.mockito', name: 'mockito-core', version: '2.13.0'
    testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile 'junit:junit:4.12'
	testImplementation('org.springframework.boot:spring-boot-starter-test')*/
	
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.5.13'
	implementation group: 'org.springframework.kafka', name: 'spring-kafka', version: '2.8.7'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.6.1'
	implementation group: 'org.json', name: 'json', version: '20220320'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

/*jacocoTestReport {
    reports {
        xml {
            enabled true // coveralls plugin depends on xml format report
        }

        html {
            enabled true
        }
    }


    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['com/thinkpalm/bibliothek/entity',
                              'com/thinkpalm/bibliothek/exception',
                              'com/thinkpalm/bibliothek/config',
                              'com/thinkpalm/bibliothek/health',
                              'com/thinkpalm/bibliothek/pojo',
                              'com/thinkpalm/bibliothek/service/UserPrinciple',
                              'com/thinkpalm/bibliothek/BibliothekApplication'])
        })
    }
}

jacoco {
    toolVersion = "0.8.1"
}

jacocoTestCoverageVerification {

    violationRules {
        rule {
            element = 'CLASS'
            excludes = ["com.thinkpalm.bibliothek.entity.", "com.thinkpalm.bibliothek.exception.",
                        "com.thinkpalm.bibliothek.config.","com.thinkpalm.bibliothek.pojo.","com.thinkpalm.bibliothek.service.UserPrinciple",
                        "com.thinkpalm.bibliothek.health.", "com.thinkpalm.bibliothek.BibliothekApplication"]
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }
        }
    }
}



// to run coverage verification during the build (and fail when appropriate)
check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport*/
